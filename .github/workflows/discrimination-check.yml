name: Discrimination Check

on:
  pull_request:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  discrimination-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      statuses: write

    steps:
      - name: Set Initial Pending Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'pending',
              context: 'discrimination-check',
              description: 'Waiting for reviewer response'
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '### Code Review Question\nDid you follow the rules?\n\nPlease reply with `/answer yes` or `/answer no`'
            });

      - name: Process Answer
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            
            // Only process comments that start with /answer
            if (!comment.startsWith('/answer')) {
              return;
            }
            
            const answer = comment.replace('/answer', '').trim();
            let state = 'error';
            let description = 'Invalid response';
            
            if (answer === 'yes') {
              state = 'success';
              description = 'Rules were followed';
            } else if (answer === 'no') {
              state = 'failure';
              description = 'Rules were not followed';
            }
            
            // Get the PR details since we're in a comment context
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Set the status first
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.data.head.sha,
              state: state,
              context: 'discrimination-check',
              description: description
            });

            // If answer is no, close the PR after setting status
            if (answer === 'no') {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸš« This PR has been automatically closed because rules were not followed.'
              });
            }
